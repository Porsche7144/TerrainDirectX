// HLSL

// Shader 클래스의 MatrixBufferType 구조와 같아야함.
// HLSL 구조체 순서는 Shader.cpp에서 상수버퍼로 넘긴 구조체 순서와 같아야한다.
// 반대로 하면 안뜸.. 삽질해서 알아냄

cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projMatrix;
};

cbuffer CameraBuffer
{
	float3 CameraPos;
	float padding;
};

struct VS_INPUT
{
	float4 pos : POSITION;
    float2 tex : TEXTURE;
	float3 normal : NORMAL;
};

struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 ViewDirection : TEXCOORD1;  // VS에서 보는 방향을 계산하고, 반사광 계산을 위해 PS로 넘김.
};

//////////////////////////////////////////////
//				버텍스 쉐이더               //
//////////////////////////////////////////////

VS_OUTPUT VS_VertexShader(VS_INPUT input)
{
	VS_OUTPUT output;
	float4 worldPosition;

	// 행렬 계산을 위해 position벡터를 w까지 가지는 Vector4로 사용
	input.pos.w = 1.0f;

	// 월드, 뷰, 투영 행렬에 대한 정점의 위치를 계산
	// 월드, 뷰, 투영 순서로 계산
	output.pos = mul(input.pos, worldMatrix);
	output.pos = mul(output.pos, viewMatrix);
	output.pos = mul(output.pos, projMatrix);

	// 픽셀 쉐이더가 사용할 색상 전달
	// output.color = input.color;

	// 픽셀 쉐이더의 텍스처 좌표 저장
	output.tex = input.tex;

	// 라이트 정점의 노말 벡터는 월드 좌표계에서 계산
	output.normal = mul(input.normal, (float3x3)worldMatrix);

	// 픽셀 쉐이더로 넘기기 전에 정규화
	output.normal = normalize(output.normal);

	// 정점 월드상의 위치를 계산
	worldPosition = mul(input.pos, worldMatrix);

	// 카메라 위치에서 정점월드를 빼고 실제로 어떤 방향을 보는지 알아낸다.
	output.ViewDirection = CameraPos.xyz - worldPosition.xyz;

	// 계산된 디렉션 정규화
	output.ViewDirection = normalize(output.ViewDirection);

	return output;
}